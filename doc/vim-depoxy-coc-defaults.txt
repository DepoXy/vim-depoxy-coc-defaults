*vim-depoxy-coc-defaults.txt*          Opionated CoC defaults.

vim-depoxy-coc-defaults~
                                     *vim-depoxy-coc-defaults-author*

Author: Landon Bouma <http://github.com/landonb>
License: CC0 1.0 Public Domain (see `:e LICENSE`)

===========================================================================
CONTENTS                             *vim-depoxy-coc-defaults-contents*

Documentation Index ~

1. Introduction                      |vim-depoxy-coc-defaults-introduction|
2. Requirements                      |vim-depoxy-coc-defaults-requirements|
3. Commands                          |vim-depoxy-coc-defaults-commands|

===========================================================================
INTRODUCTION                         *vim-depoxy-coc-defaults-introduction*

Sets opinionated CoC defaults.

- Disables highlighting symbol on hover.
>
  let g:lsp_highlight_references_enabled = 0
<
- Disables autocomplete popup by default.
>
  let g:asyncomplete_auto_popup = 0
<
- Always show `signcolumn` to avoid jittery UX.
>
  set signcolumn=number
<
- Adds a handful of useful commands (see below).

===========================================================================
REQUIREMENTS                         *vim-depoxy-coc-defaults-requirements*

This plug-in requires `coc` and whatever else it requires.

https://github.com/neoclide/coc.nvim

You'll also need LSPes for your languages, e.g.,

https://github.com/neoclide/coc-tsserver

https://github.com/neoclide/coc-json

===========================================================================
USAGE                                *vim-depoxy-coc-defaults-commands*

vim-depoxy-coc-defaults commands~

Use `[g` and `]g` to navigate diagnostics:

                                                        *[g*
[g                      Calls `coc-diagnostic-prev`

                                                        *]g*
]g                      Calls `coc-diagnostic-next`

Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.

Find definition and usages, etc.:

                                                        *gd*
gd                      Calls `coc-definition`

                                                        *gy*
gy                      Calls `coc-type-definition`

                                                        *gi*
gi                      Calls `coc-implementation`

                                                        *gr*
gr                      Calls `coc-references`

Other:
                                                        *K*
K                       Shows documentation for keyword
                        under cursor

 vim:tw=78:ts=8:ft=help:norl:
